{"version":3,"sources":["client.js","Notification.js","StudentDrawerForm.js","App.js","reportWebVitals.js","index.js"],"names":["checkStatus","response","ok","error","Error","statusText","Promise","reject","openNotificationWithIcon","type","message","description","notification","Option","Select","antIcon","LoadingOutlined","style","fontSize","spin","StudentDrawerForm","showDrawer","setShowDrawer","fetchStudents","onCLose","useState","submitting","setSubmitting","title","width","onClose","visible","bodyStyle","paddingBottom","footer","textAlign","onClick","marginRight","layout","onFinishFailed","errorInfo","alert","JSON","stringify","onFinish","student","console","log","fetch","headers","method","body","addNewStudent","then","name","catch","err","finally","hideRequiredMark","gutter","span","Item","label","rules","required","placeholder","value","htmlType","indicator","Header","Layout","Content","Footer","Sider","SubMenu","Menu","columns","dataIndex","key","App","students","setStudents","collapsed","setCollapsed","fetching","setFetching","res","json","data","useEffect","minHeight","collapsible","onCollapse","className","theme","defaultSelectedKeys","mode","icon","PieChartOutlined","DesktopOutlined","UserOutlined","TeamOutlined","FileOutlined","padding","margin","dataSource","bordered","shape","PlusOutlined","size","pagination","pageSize","scroll","y","rowKey","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2979363.chunk.js","sourcesContent":["import fetch from 'unfetch';\n\nconst checkStatus = response => {\n\tif (response.ok) {\n\t\treturn response;\n\t}\n\t// convert non-2xx HTTP responses into errors:\n\tconst error = new Error(response.statusText);\n\terror.response = response;\n\treturn Promise.reject(error);\n}\n\nexport const getAllStudents = () =>\n\tfetch(\"/api/v1/students\")\n\t\t.then(checkStatus);\n\n\nexport const addNewStudent = student =>\n\tfetch(\"api/v1/students\", {\n\t\t\theaders: {\n\t\t\t\t'Content-Type': 'application/json'\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t\tbody: JSON.stringify(student)\n\t\t}\n\t);\n","import {notification} from \"antd\";\n\nconst openNotificationWithIcon = (type, message, description) =>\n\tnotification[type]({message, description});\n\nexport const successNotification = (message, description) =>\n\topenNotificationWithIcon('success', message, description);\n\nexport const errorNotification = (message, description) =>\n\topenNotificationWithIcon('error', message, description);\n\nexport const infoNotification = (message, description) =>\n\topenNotificationWithIcon('info', message, description);\n\nexport const warningNotification = (message, description) =>\n\topenNotificationWithIcon('warning', message, description);\n","import {Drawer, Input, Col, Select, Form, Row, Button, Spin} from 'antd';\nimport {successNotification, errorNotification} from \"./Notification\";\nimport {LoadingOutlined} from \"@ant-design/icons\";\nimport {useState} from 'react';\nimport {addNewStudent} from \"./client\";\nconst {Option} = Select;\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nfunction StudentDrawerForm({showDrawer, setShowDrawer, fetchStudents}) {\n    const onCLose = () => setShowDrawer(false);\n    const [submitting, setSubmitting] = useState(false);\n\n    const onFinish = student => {\n        setSubmitting(true)\n        console.log(JSON.stringify(student, null, 2))\n        addNewStudent(student)\n          .then(() => {\n              console.log(\"student added\")\n              onCLose();\n              successNotification(\n                \"Student successfully added\",\n                `${student.name} was added to the system`\n              )\n              fetchStudents();\n          }).catch(err => {\n            console.log(err)\n        }).finally(() => {\n            setSubmitting(false);\n        })\n    };\n\n    const onFinishFailed = errorInfo => {\n        alert(JSON.stringify(errorInfo, null, 2));\n    };\n\n    return <Drawer\n        title=\"Create new student\"\n        width={720}\n        onClose={onCLose}\n        visible={showDrawer}\n        bodyStyle={{paddingBottom: 80}}\n        footer={\n            <div\n                style={{\n                    textAlign: 'right',\n                }}\n            >\n                <Button onClick={onCLose} style={{marginRight: 8}}>\n                    Cancel\n                </Button>\n            </div>\n        }\n    >\n        <Form layout=\"vertical\"\n              onFinishFailed={onFinishFailed}\n              onFinish={onFinish}\n              hideRequiredMark>\n            <Row gutter={16}>\n                <Col span={12}>\n                    <Form.Item\n                        name=\"name\"\n                        label=\"Name\"\n                        rules={[{required: true, message: 'Please enter student name'}]}\n                    >\n                        <Input placeholder=\"Please enter student name\"/>\n                    </Form.Item>\n                </Col>\n                <Col span={12}>\n                    <Form.Item\n                        name=\"email\"\n                        label=\"Email\"\n                        rules={[{required: true, message: 'Please enter student email'}]}\n                    >\n                        <Input placeholder=\"Please enter student email\"/>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row gutter={16}>\n                <Col span={12}>\n                    <Form.Item\n                        name=\"gender\"\n                        label=\"gender\"\n                        rules={[{required: true, message: 'Please select a gender'}]}\n                    >\n                        <Select placeholder=\"Please select a gender\">\n                            <Option value=\"Male\">MALE</Option>\n                            <Option value=\"Female\">FEMALE</Option>\n                            <Option value=\"OTHER\">OTHER</Option>\n                        </Select>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n                <Col span={12}>\n                    <Form.Item >\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Col>\n            </Row>\n            <Row>\n                {submitting && <Spin indicator={antIcon} />}\n            </Row>\n        </Form>\n    </Drawer>\n}\n\nexport default StudentDrawerForm;\n","import {useState, useEffect} from 'react'\nimport {getAllStudents} from \"./client\";\nimport {\n    Layout,\n    Menu,\n    Breadcrumb,\n    Table,\n    Spin,\n    Empty,\n    Button,\n} from 'antd';\n\nimport {\n    DesktopOutlined,\n    PieChartOutlined,\n    FileOutlined,\n    TeamOutlined,\n    UserOutlined,\n    LoadingOutlined,\n    PlusOutlined\n} from '@ant-design/icons';\nimport StudentDrawerForm from \"./StudentDrawerForm\";\n\nimport './App.css';\n\nconst {Header, Content, Footer, Sider} = Layout;\nconst {SubMenu} = Menu;\n\nconst columns = [\n    {\n        title: 'Id',\n        dataIndex: 'id',\n        key: 'id',\n    },\n    {\n        title: 'Name',\n        dataIndex: 'name',\n        key: 'name',\n    },\n    {\n        title: 'Email',\n        dataIndex: 'email',\n        key: 'email',\n    },\n    {\n        title: 'Gender',\n        dataIndex: 'gender',\n        key: 'gender',\n    },\n];\n\nconst antIcon = <LoadingOutlined style={{fontSize: 24}} spin/>;\n\nfunction App() {\n    const [students, setStudents] = useState([]);\n    const [collapsed, setCollapsed] = useState(false);\n    const [fetching, setFetching] = useState(true);\n    const [showDrawer, setShowDrawer] = useState(false);\n\n    const fetchStudents = () =>\n        getAllStudents()\n            .then(res => res.json())\n            .then(data => {\n                console.log(data);\n                setStudents(data);\n                setFetching(false);\n            })\n\n    useEffect(() => {\n        console.log(\"component is mounted\");\n        fetchStudents();\n    }, []);\n\n    const renderStudents = () => {\n        if (fetching) {\n            return <Spin indicator={antIcon}/>\n        }\n        // if (students.length <= 0) {\n        //     return <Empty/>;\n        // }\n        return <>\n            <StudentDrawerForm\n                showDrawer={showDrawer}\n                setShowDrawer={setShowDrawer}\n                fetchStudents={fetchStudents}\n            />\n            <Table\n                dataSource={students}\n                columns={columns}\n                bordered\n                title={() =>\n                    <Button\n                        onClick={() => setShowDrawer(!showDrawer)}\n                        type=\"primary\" shape=\"round\" icon={<PlusOutlined/>} size=\"small\">\n                        Add New Student\n                    </Button>\n                }\n                pagination={{pageSize: 50}}\n                scroll={{y: 500}}\n                rowKey={student => student.id}\n            />\n        </>\n\n    }\n\n    return <Layout style={{minHeight: '100vh'}}>\n        <Sider collapsible collapsed={collapsed}\n               onCollapse={setCollapsed}>\n            <div className=\"logo\"/>\n            <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\n                <Menu.Item key=\"1\" icon={<PieChartOutlined/>}>\n                    Option 1\n                </Menu.Item>\n                <Menu.Item key=\"2\" icon={<DesktopOutlined/>}>\n                    Option 2\n                </Menu.Item>\n                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"User\">\n                    <Menu.Item key=\"3\">Tom</Menu.Item>\n                    <Menu.Item key=\"4\">Bill</Menu.Item>\n                    <Menu.Item key=\"5\">Alex</Menu.Item>\n                </SubMenu>\n                <SubMenu key=\"sub2\" icon={<TeamOutlined/>} title=\"Team\">\n                    <Menu.Item key=\"6\">Team 1</Menu.Item>\n                    <Menu.Item key=\"8\">Team 2</Menu.Item>\n                </SubMenu>\n                <Menu.Item key=\"9\" icon={<FileOutlined/>}>\n                    Files\n                </Menu.Item>\n            </Menu>\n        </Sider>\n        <Layout className=\"site-layout\">\n            <Header className=\"site-layout-background\" style={{padding: 0}}/>\n            <Content style={{margin: '0 16px'}}>\n                <Breadcrumb style={{margin: '16px 0'}}>\n                    <Breadcrumb.Item>User</Breadcrumb.Item>\n                    <Breadcrumb.Item>Bill</Breadcrumb.Item>\n                </Breadcrumb>\n                <div className=\"site-layout-background\" style={{padding: 24, minHeight: 360}}>\n                    {renderStudents()}\n                </div>\n            </Content>\n            <Footer style={{textAlign: 'center'}}>By Amigoscode</Footer>\n        </Layout>\n    </Layout>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}